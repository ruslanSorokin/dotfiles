-- # chezmoi:template:left-delimiter="--{{" right-delimiter="}}--"
local wezterm = require("wezterm")
local mapping = require("mapping")
local theme = require("theme")
local util = require("util")
local font = require("font")

local wezterm_mux = wezterm.mux

local config = {}
if wezterm.config_builder then
	config = wezterm.config_builder()
end

local current_theme = theme.apply(config, "Catppuccin Frappe")

local UNICODE = {
	SOLID_LEFT_ARROW = wezterm.nerdfonts.pl_right_hard_divider,
	SOLID_RIGHT_ARROW = wezterm.nerdfonts.pl_left_hard_divider,
	FULLSCREEN = wezterm.nerdfonts.md_fullscreen_exit,

	ABC = wezterm.nerdfonts.cod_symbol_key,
	NETWORK = wezterm.nerdfonts.md_network_pos,
	MONITOR = wezterm.nerdfonts.md_monitor_dashboard,

	KEYBOARD = wezterm.nerdfonts.fa_keyboard_o,
}

config.window_padding = {
	left = 0,
	right = 0,
	top = 0,
	bottom = 0,
}

config.allow_win32_input_mode = true
config.enable_csi_u_key_encoding = false
config.enable_kitty_keyboard = true

config.default_cursor_style = "SteadyUnderline"
config.tab_bar_at_bottom = false
config.use_fancy_tab_bar = false
config.tab_max_width = 50

config.cursor_blink_rate = 600
config.cursor_blink_ease_out = "Constant"
config.cursor_blink_ease_in = "Constant"

config.initial_rows = 24
config.initial_cols = 108

config.window_close_confirmation = "NeverPrompt"
config.audible_bell = "Disabled"

config.window_background_opacity = 1
config.macos_window_background_blur = 10
config.native_macos_fullscreen_mode = true
config.enable_scroll_bar = false

config.disable_default_quick_select_patterns = true
config.quick_select_patterns = {
	-- markdown_url
	"\\[[^]]*\\]\\(([^)]+)\\)",

	-- diff_a
	"--- a/(\\S+)",
	-- diff_b
	"\\+\\+\\+ b/(\\S+)",
	-- docker
	"sha256:([0-9a-f]{64})",

	-- ed25519 long ID
	"(?:((?:ed|cv)25519|(?:rsa|dsa|elg)\\d+)/(?:0[xX])?)(\\h+)", --[[ MUST BE before 'path' ]]

	-- PGP key fingerprint
	"Key fingerprint = ((?:\\h| ){50})",
	-- PGP key fingerprint
	"\\:(\\h{40})\\:",
	-- PGP keygrip
	"Keygrip = (\\h{40})",
	-- PGP keygrip
	"\\h{40}",

	-- path
	"(?:[.\\w\\-@~]+)?(?:/+[.\\w\\-@]+)+", -- [[ MUST BE before 'mnemonic names' regex ]]

	-- color
	"#[0-9a-fA-F]{6}",

	-- mnemonic names e.g. OCI containers / zellij sessions
	"(?:[.\\w\\-@~]+)(?:-|_)(?:[.\\w\\-@~]+)", -- MUST BE before 'uuid' regex

	-- uuid
	"[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}",

	-- ipfs
	"Qm[0-9a-zA-Z]{44}",
	-- sha
	"[0-9a-f]{7,40}",
	-- ip
	"\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}",
	-- ipv6
	"[A-f0-9:]+:+[A-f0-9:]+[%\\w\\d]+",
	-- address
	"0x[0-9a-fA-F]+",
	-- number
	"[0-9]{4,}",
	-- SHA fingerprint
	"(?:SHA(1|128|256|512)):(\\S+)",

	-- [0-9A-Fa-f]
	"[\\h:]+:+[\\h:]+[%\\w\\d]+",

	util.build_link_regex({
		"https",
		"http",
		"git",
		"ssh",
		"ftp",
		"file",
	}),

	-- vless has a lot of garbage that cannot be captured with \\S+
	"vless://.*",

	-- email
	"<(\\S+)>",
}

config.max_fps = 144

--{{- if .os.isDarwin -}}--
config.default_prog = { "/bin/zsh", "-l" }
--{{- end }}--

--{{- if .os.isLinux -}}--
config.default_prog = { "/usr/bin/zsh", "-l" }
--{{- end }}--

--{{- if .os.isWindows-}}--
config.default_prog = { "powershell", "-NoProfile" }
--{{- end }}--

config.wsl_domains = {
	{
		name = "WSL:Ubuntu",
		distribution = "Ubuntu",
		username = "ruslan",
		default_cwd = "/home/ruslan",
	},
}
config.ssh_domains = {
	{
		name = "SSH:Ubuntu",
		remote_address = "wsl-ubuntu",
		username = "ruslan",
	},
}
config.unix_domains = {
	{ name = "LOCAL:Unix" },
}
config.hide_tab_bar_if_only_one_tab = false
config.automatically_reload_config = false
-- config.default_domain = "WSL:Ubuntu"
-- config.default_domain = "LOCAL:Unix"

wezterm.on(util.const.event.gui_attached, function(_)
	local workspace = wezterm_mux.get_active_workspace()
	for _, window in ipairs(wezterm_mux.all_windows()) do
		if window:get_workspace() == workspace then
			window:gui_window():toggle_fullscreen()
		end
	end
end)

wezterm.on(util.const.event.gui_startup, function(_)
	local _, dotfiles_pane
	_ = wezterm_mux.spawn_window({
		domain = { DomainName = "WSL:Ubuntu" },
		cwd = "/home/ruslan",
		workspace = "dotfiles",
	})

	local _, _, _ = wezterm_mux.spawn_window({
		domain = { DomainName = "WSL:Ubuntu" },
		cwd = "/home/ruslan",
		workspace = "home",
	})
end)

local tab_title = function(tab_info)
	local title = tab_info.tab_title

	-- if the tab title is explicitly set, take that
	if title and #title > 0 then
		return title
	end

	-- Otherwise, use the title from the active pane
	-- in that tab
	return tab_info.active_pane.title
end

local format_item = function(text, is_active, hover)
	local bg = current_theme.tab_bar.item.inactive.bg
	if is_active then
		bg = current_theme.tab_bar.item.active.bg
	end
	local edge_fg = bg

	local fg = current_theme.BLACK
	local edge_bg = current_theme.tab_bar.edge_bg

	return wezterm.format({
		{ Background = { Color = edge_bg } },
		{ Foreground = { Color = edge_fg } },
		{ Text = UNICODE.SOLID_LEFT_ARROW },

		{ Background = { Color = bg } },
		{ Foreground = { Color = fg } },
		{ Text = text },

		{ Background = { Color = edge_bg } },
		{ Foreground = { Color = edge_fg } },
		{ Text = UNICODE.SOLID_RIGHT_ARROW },
	})
end

wezterm.on(util.const.event.format_tab_title, function(tab, tabs, panes, config, hover, max_width)
	local title = tab_title(tab)

	-- ensure that the titles fit in the available space,
	-- and that we have room for the edges.
	title = wezterm.truncate_right(title, max_width - 2)

	return format_item(title, tab.is_active, hover)
end)

local function is_zoomed_pane(pane)
	local our_tab = pane:tab()
	local is_zoomed = false
	if our_tab ~= nil then
		for _, pane_attributes in pairs(our_tab:panes_with_info()) do
			is_zoomed = pane_attributes["is_zoomed"] or is_zoomed
		end
	end

	return is_zoomed
end

wezterm.on(util.const.event.update_right_status, function(window, pane)
	local status = ""
	local WORKSPACE = UNICODE.MONITOR
	local KEY_TABLE = UNICODE.KEYBOARD
	local LEADER_KEY = UNICODE.KEYBOARD
	local ZOOMED_PANE = UNICODE.FULLSCREEN

	local is_zoomed_pane = is_zoomed_pane(pane)
	if is_zoomed_pane then
		status = status .. format_item(ZOOMED_PANE, true, false)
	end

	local workspace = window:active_workspace()
	if workspace then
		workspace = WORKSPACE .. " : " .. workspace

		status = status .. format_item(workspace, true, false)
	end

	local is_leader_active = window:leader_is_active()
	if is_leader_active then
		local leader = LEADER_KEY .. " : " .. "LEADER"

		status = status .. format_item(leader, true, false)
	end

	local key_table = window:active_key_table()
	if key_table then
		key_table = KEY_TABLE .. " : " .. key_table

		status = status .. format_item(key_table, true, false)
	end

	status = status .. format_item(wezterm.strftime("%H:%M:%S"), true, false)
	status = status .. format_item(wezterm.strftime("%A, %d %B %Y"), true, false)

	window:set_right_status(status)
end)

mapping.apply(config)
font.apply(config)

return config
